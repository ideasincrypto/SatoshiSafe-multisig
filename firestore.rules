rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {
            allow read, write: if false;
        }

        match /users/{userID} {
            allow read: if request.auth != null;
            allow create, update: if request.auth != null && request.auth.uid == userID;

            match /teams/{teamID} {
                allow read: if request.auth != null;
                allow write: if request.auth != null && request.auth.uid == userID;
            }
        }

        match /teams/{teamID} {
            allow create: if request.auth != null;
            allow read: if request.auth != null && request.auth.uid in resource.data.users;
            allow update: if request.auth != null
                && request.auth.uid in resource.data.users
                && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['safes', 'users']);

            match /transactions/{transactionID} {
                allow read, create, update: if request.auth != null
                    && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamID)).data.users;
            }

            match /messages/{messageID} {
                allow read, create: if request.auth != null
                    && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamID)).data.users;
                // Allow updates to the 'threadCount' and 'threadLastReply' fields
                // by any user listed in the 'users' array of the team document
                allow update: if request.auth != null &&
                request.auth.uid in get(/databases/$(database)/documents/teams/$(teamID)).data.users &&
                request.resource.data.diff(resource.data).affectedKeys().hasOnly(['threadCount', 'threadLastReply']);
                // Allow update and delete only if the request.auth.uid matches the uid field in the message document
                allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;

                match /thread/{threadID} {
                    // Allow read access to threads if the user is part of the team
                    allow read, create: if request.auth != null
                        && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamID)).data.users;
                    // Allow delete of the thread only if the request.auth.uid matches the uid field in the parent message document
                    // Means - owner of the message can delete whole thread
                    allow delete: if request.auth != null
                        && request.auth.uid == get(/databases/$(database)/documents/teams/$(teamID)/messages/$(messageID)).data.uid;
                    // Allow update and delete only if the request.auth.uid matches the uid field in the thread document
                    allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
                }
            }
        }

        match /invitations/{inviteID} {
            allow get: if true;
        }

        // Explicitly deny querying the entire collection
        match /invitations {
            allow list: if false;
        }

        match /assetsByWalletAddress/{walletID} {
            allow read: if request.auth != null;

            match /allTokenList/{document=**} {
                allow read: if request.auth != null;
            }

            match /complexProtocolList/{document=**} {
                allow read: if request.auth != null;
            }

            match /totalBalance/{document=**} {
                allow read: if request.auth != null;
            }
        }

        match /subscriptionTypes/{document=**} {
            allow read: if true;
        }

        match /subscriptions/{documentId} {
            allow read: if request.auth.uid in resource.data.team.users
        }

        match /invoices/{documentId} {
            allow read: if request.auth.uid == resource.data.ownerId;
        }
    }
}
